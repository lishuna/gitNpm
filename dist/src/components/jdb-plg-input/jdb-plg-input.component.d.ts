import { OnInit, EventEmitter, TemplateRef, ElementRef, AfterViewInit, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
export declare class JdbPlgInputComponent implements OnInit, AfterViewInit, ControlValueAccessor {
    private render;
    _value: string;
    _type: string;
    _placeHolder: string;
    _size: string;
    _disabled: boolean;
    _readonly: boolean;
    _error: boolean;
    _classMap: any;
    _inputWrapClass: Array<string>;
    _clear: boolean;
    _maxlength: number;
    _autoPromptData: Array<any>;
    _composing: boolean;
    width: string;
    onChange: (value: string) => void;
    _errorContent: TemplateRef<any>;
    _addOnContentBefore: TemplateRef<any>;
    _addOnContentAfter: TemplateRef<any>;
    _prefixContent: TemplateRef<any>;
    _suffixContent: TemplateRef<any>;
    jdbBlur: EventEmitter<MouseEvent>;
    jdbFocus: EventEmitter<MouseEvent>;
    inputEl: ElementRef;
    clearBtnEl: ElementRef;
    constructor(render: Renderer2);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    compositionStart(e: CompositionEvent): void;
    compositionEnd(e: CompositionEvent): void;
    jdbType: string;
    jdbPlaceHolder: string;
    jdbSize: string;
    jdbDisabled: boolean;
    jdbReadonly: boolean;
    jdbValue: string;
    jdbError: boolean;
    jdbClear: boolean;
    jdbMaxLength: number;
    jdbPromptData: Array<any>;
    writeValue(value: string): void;
    registerOnChange(fn: (_: string) => void): void;
    registerOnTouched(fn: () => void): void;
    _emitBlur($event: any): void;
    _emitFocus($event: any): void;
    textareaOnChange($event: any): void;
    setClassMap(): void;
    clearTxt(): void;
    toBoolean(value: boolean | string): boolean;
}
